import os
import time

start = time.time()

# Dictionaries to store information
File_Types = {"PE32": 0, "HTML": 0, "ELF 32": 0, "ELF 64": 0, "PE32 .NET": 0, "Python": 0, "XML": 0, "PHP": 0,
              "ASCII": 0, "Perl": 0, "Java": 0,"Dalvik dex":0}
Architectures = {"x86-64": 0, "ARM": 0, "MIPS": 0, "Intel 80386": 0}
Endian = {"x86-64 LSB": 0, "x86-64 MSB": 0, "ARM LSB": 0, "ARM MSB": 0, "MIPS LSB": 0, "MIPS MSB": 0,
          "ELF 64 LSB": 0, "ELF 64 MSB": 0, "ELF 32 LSB": 0, "ELF 32 MSB": 0, "Intel 80386 MSB": 0,
          "Intel 80386 LSB": 0}
Encodings={"HTML UTF-8":0, "HTML ISO-8859":0,"XML UTF-8":0,"UTF-8":0,"ISO-8859":0}

# Running totals to store file counts

# File info
running_totalHTML = 0
running_totalPE32 = 0
running_totalELF32 = 0
running_totalELF64 = 0
running_totalPE32DotNet = 0
running_totalPHP = 0
running_totalPython = 0
running_totalXML = 0
running_totalASCII = 0
running_totalPERL = 0
running_totalJava = 0
running_totalDalvikDex=0
file_type_other = 0
file_count = 0
file_not_read = 0

# Endians
running_totalx8664smallE = 0
running_totalx8664bigE = 0
running_totalARMsmallE = 0
running_totalARMbigE = 0
running_totalMIPSsmallE = 0
running_totalMIPSbigE = 0
running_totalELF64smallE = 0
running_totalELF64bigE = 0
running_totalELF32smallE = 0
running_totalELF32bigE = 0
running_totalIntel80386smallE = 0
running_totalIntel80386bigE = 0

# Different kinds of architectures
running_totalx8664 = 0
running_totalMIPS = 0
running_totalARM = 0
running_totalIntel80386 = 0
architecture_other = 0

# Character encodings
running_totalUTF8=0
running_totalISO8859=0
running_totalHTMLUTF8=0
running_totalHTMLISO8859=0
running_totalXMLUTF8=0


# Read file line-by-line
with open("/home/aglorioso/Documents/temp/magic.txt") as f:
    for line in f:
        line = line.strip()
        print(line)
        file_count += 1

        # File Types
        if "PE32" in line:
            File_Types["PE32"] += 1
            running_totalPE32 = File_Types ["PE32"]
        elif "HTML" in line:
            File_Types["HTML"] += 1
            running_totalHTML=File_Types["HTML"]
            if "HTML" and "UTF-8" in line:
                Encodings["HTML UTF-8"] += 1
                running_totalHTMLUTF8 = Encodings["HTML UTF-8"]
            elif "HTML" and "ISO-8859" in line:
                Encodings["HTML ISO-8859"] += 1
                running_totalHTMLISO8859 = Encodings["HTML ISO-8859"]
        elif "HTML" not in line and "ISO-8859" in line:
            Encodings["ISO-8859"] += 1
            running_totalISO8859=Encodings["ISO-8859"]
        elif "ELF 32" in line:
            File_Types["ELF 32"] += 1
            running_totalELF32 = File_Types["ELF 32"]
        elif "PHP" in line:
            File_Types["PHP"] += 1
            running_totalPHP = File_Types["PHP"]
        if "ELF 32-bit" and "MSB" in line:
            Endian["ELF 32 MSB"] += 1
            running_totalELF32bigE = Endian["ELF 32 MSB"]
        elif "ELF 32-bit" and "LSB" in line:
            Endian["ELF 32 LSB"] += 1
            running_totalELF32smallE = Endian["ELF 32 LSB"]
        if "ELF 64" in line:
            File_Types["ELF 64"] += 1
            running_totalELF64 = File_Types["ELF 64"]
            if "ELF 64-bit" and "LSB" in line:
                Endian["ELF 64 LSB"] += 1
                running_totalELF64smallE = Endian["ELF 64 LSB"]
            elif "ELF 64" and "MSB" in line:
                Endian["ELF 64 MSB"] += 1
                running_totalELF64bigE = Endian["ELF 64 MSB"]
        elif "Python" in line:
            File_Types["Python"] += 1
            running_totalPython = File_Types["Python"]
        elif "XML" in line:
            File_Types["XML"] += 1
            running_totalXML = File_Types["XML"]
            if "XML" and "UTF-8" in line:
                Encodings["XML UTF-8"] += 1
                running_totalXMLUTF8= Encodings["XML UTF-8"]
        elif "XML" not in line and "UTF-8" in line:
            Encodings["UTF-8"] +=1
            running_totalUTF8 = Encodings["UTF-8"]
        elif "Perl" in line:
            File_Types["Perl"] +=1
            running_totalPERL=File_Types["Perl"]
        elif "ASCII" in line:
            File_Types["ASCII"] += 1
            running_totalASCII = File_Types["ASCII"]

        elif "Java" in line:
            File_Types["Java"] += 1
            running_totalJava = File_Types["Java"]
        elif "Dalvik dex" in line:
            File_Types["Dalvik dex"] += 1
            running_totalDalvikDex = File_Types["Dalvik dex"]
        else:
            file_type_other += 1

        if "x86-64" in line:
            Architectures["x86-64"] += 1
            running_totalx8664 = Architectures["x86-64"]
            if "LSB Executable" and "x86-64" in line:
                Endian["x86-64 LSB"] += 1
                running_totalx8664smallE = Endian["x86-64 LSB"]
            elif "MSB Executable" and "x86-64" in line:
                Endian["x86-64 MSB"] += 1
                running_totalx8664bigE = Endian["x86-64 MSB"]
        elif "ARM" in line:
            Architectures["ARM"] += 1
            running_totalARM = Architectures["ARM"]
            if "ARM" and "MSB" in line:
                Endian["ARM MSB"] += 1
                running_totalARMbigE = Endian["ARM MSB"]
            elif "ARM" and "LSB" in line:
                Endian["ARM LSB"] += 1
                running_totalARMsmallE = Endian["ARM LSB"]
        elif "MIPS" in line:
            Architectures["MIPS"] += 1
            running_totalMIPS = Architectures["MIPS"]
            if "MIPS" and "MSB" in line:
                Endian["MIPS MSB"] += 1
                running_totalMIPSbigE = Endian["MIPS MSB"]
            elif "MIPS" and "LSB" in line:
                Endian["MIPS LSB"] += 1
                running_totalMIPSsmallE = Endian["MIPS LSB"]
        elif "Intel 80386" in line:
            Architectures["Intel 80386"] += 1
            running_totalIntel80386 = Architectures["Intel 80386"]
            if "Intel 80386" and "LSB" in line:
                Endian["Intel 80386 LSB"] += 1
                running_totalIntel80386smallE = Endian["Intel 80386 LSB"]
            elif "Intel 80386" and "MSB" in line:
                Endian["Intel 80386 MSB"] += 1
                running_totalIntel80386bigE = Endian["Intel 80386 MSB"]
        else:
            architecture_other += 1

        # Architectures



end=time.time()




print(f"""
Count by File Type
------------------
ASCII Text files: {running_totalASCII}
Dalvik Dex files: {running_totalDalvikDex}
PE32 files: {running_totalPE32}
HTML files: {running_totalHTML}
ELF 32-bit files: {running_totalELF32}
ELF 32-bit Big Endian files: {running_totalELF32bigE}
ELF 32-bit Little Endian files: {running_totalELF32smallE}
ELF 64-bit files: {running_totalELF64}
ELF 64-bit Big Endian files: {running_totalELF64bigE}
ELF 64-bit Little Endian files: {running_totalELF64smallE}
Java files: {running_totalJava}
Perl files: {running_totalPERL}
Python files: {running_totalPython}
XML files: {running_totalXML}
PHP files: {running_totalPHP}

Count By Architecture
---------------------
x86-64: {running_totalx8664} files
ARM: {running_totalARM} files
MIPS: {running_totalMIPS} files
Intel 80386: {running_totalIntel80386} files
Other Architecture: {architecture_other} files




Encoded files
-------------
HTML files with UTF-8 encoding: {running_totalHTMLUTF8}
HTML files with ISO-8859 encoding: {running_totalHTMLISO8859}
Files with only ISO-8859 encoding: {running_totalISO8859}
XML files with UTF-8 encoding: {running_totalXMLUTF8}
Unidentified file types with UTF-8 Encoding: {running_totalUTF8}





Totals
------
Total Files: {file_count}
File Types Known: {sum(File_Types.values())}
File types Unknown:{(file_count) - sum(File_Types.values())}
Files with Known Architectures: {sum(Architectures.values())}
Files with no Architecture / unknown Architectures; {architecture_other - sum(Architectures.values())}


Runtime:{round((end-start),3)} s



""")