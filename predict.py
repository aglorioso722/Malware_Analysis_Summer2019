# -*- coding: utf-8 -*-
import os
import json
import tqdm
import magic
import argparse
import time
import numpy as np
from vectorizer import PEFeatureExtractor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import TimeSeriesSplit
from sklearn.metrics import (roc_auc_score, make_scorer)
from sklearn import svm
from joblib import dump, load

parser = argparse.ArgumentParser(description='A python-magic parser')

# Add the arguments: Enter filepath(s)

parser.add_argument("dir_path", help="paste path to file")
args = parser.parse_args()

data = []
target = []
file_descriptions = [] #so we can refer to the magic output when generating the report

def test_model():
    clf = load("./classifiers/compression_classifier.joblib")
    
    for root, dirs, files in os.walk(args.dir_path, topdown=False):
        for file in files:
            f = os.path.join(root, file)
            process_file(clf, f)
            
    generate_report(clf)

def process_file(clf, f):
    output = magic.from_file(f).lower()

    keywords = [
        "upx compressed",
        "self-extracting archive",
        "pecompact2_compressed"
    ]

    if not "pe32" in output:
        return
    else:
        target_value = 0 #not compressed
        for keyword in keywords:
            if keyword in output:
                target_value = 1
        target.append(target_value)

        file_data = open(f, "rb").read()
        extractor = PEFeatureExtractor(f)
        data.append(extractor.feature_vector(file_data, f))
        file_descriptions.append(output)

def generate_report(clf):
    predictions = clf.predict(data)
    correct = 0
    for i in range(len(data)):
        correct += 1 if predictions[i] == target[i] else 0
        print("Testing file of type " + file_descriptions[i])
        print("actual: " + ("Packaged" if target[i] == 1 else "Unpackaged"))
        print("classifier: " + ("Packaged" if predictions[i] == 1 else "Unpackaged"))
    print("Classifier successfully predicted whether or not " + str(correct) + " pe files were packaged.")

test_model()