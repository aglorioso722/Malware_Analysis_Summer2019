# -*- coding: utf-8 -*-
import os
import json
import tqdm
import magic
import argparse
import time
import numpy as np
import pandas as pd
import lightgbm as lgb
import multiprocessing
from vectorizer import PEFeatureExtractor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import TimeSeriesSplit
from sklearn.metrics import (roc_auc_score, make_scorer)
from sklearn import svm
from joblib import dump, load

parser = argparse.ArgumentParser(description='A python-magic parser')

# Add the arguments: Enter filepath(s)

parser.add_argument("dir_path", help="paste path to file")
args = parser.parse_args()

data = []
target = []

def train_model():
    os.mkdir("classifiers")

    for root, dirs, files in os.walk(args.dir_path, topdown=False):
        for file in files:
            f = os.path.join(root, file)
            process_file(f)

    clf = svm.SVC(gamma=0.001, C=100.)
    clf.fit(data, target)
    dump(clf, "./classifiers/compression_classifier.joblib")
                
def process_file(f):
    output = magic.from_file(f).lower()

    keywords = [
        "upx compressed",
        "self-extracting archive",
        "pecompact2_compressed"
    ]

    if not "pe32" in output:
        return
    else:
        target_value = 0 #not compressed
        for keyword in keywords:
            if keyword in output:
                target_value = 1
        target.append(target_value)

        file_data = open(f, "rb").read()
        extractor = PEFeatureExtractor(f)
        data.append(extractor.feature_vector(file_data, f))

 
train_model()
